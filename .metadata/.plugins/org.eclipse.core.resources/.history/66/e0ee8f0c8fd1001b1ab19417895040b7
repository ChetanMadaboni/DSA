package com.wiley.tree;

import java.util.Iterator;
import java.util.Stack;

class Node{
	int key;
	Node left;
	Node right;
	public Node(int key){
		this.key=key;
	}
	Node(int key,Node left,Node right){
		this.left=left;
		this.key=key;
		this.right=right;
	}
	Node(){
		
	}
}
public class TreeNormal {
	Node root;
	static void InorderIter(Node root) {
		Stack<Integer> res=new Stack<Integer>();
		Stack<Node> st=new Stack<Node>();
		Node cur=root;
		while(true) {
			while(cur!=null) {
				st.push(cur);
				cur=cur.left;
			}
			if(st.isEmpty())
				break;
			cur=(Node)st.pop();
			res.add(cur.key);
			cur=cur.right;
		}
		Iterator<Integer> it=res.iterator();
		while(it.hasNext()) {
			//System.out.println("hi");
			System.out.println(it.next());
		}
	}

	public static void main(String[] args) {
		TreeNormal tr=new TreeNormal();
		Node left=new Node(1);
		Node right=new Node(2);
		Node root=new Node(1,left,right);
		left.left=new Node(4);
		left.right=new Node(5);
		right.left=new Node(6);
		right.right=new Node(7);
		//TreeNormal tr=new TreeNormal();
		InorderIter(root);

	}

}
